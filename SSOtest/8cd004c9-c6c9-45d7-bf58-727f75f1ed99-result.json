{"name": "安裝瀏覽器", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 106\nCurrent browser version is 108.0.5359.72 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00561ED3+2236115]\n\tOrdinal0 [0x004F92F1+1807089]\n\tOrdinal0 [0x004066FD+812797]\n\tOrdinal0 [0x00428C6D+953453]\n\tOrdinal0 [0x00424200+934400]\n\tOrdinal0 [0x004219C9+924105]\n\tOrdinal0 [0x0045806C+1146988]\n\tOrdinal0 [0x00457A6A+1145450]\n\tOrdinal0 [0x004518A6+1120422]\n\tOrdinal0 [0x0042A73D+960317]\n\tOrdinal0 [0x0042B71F+964383]\n\tGetHandleVerifier [0x0080E7E2+2743074]\n\tGetHandleVerifier [0x008008D4+2685972]\n\tGetHandleVerifier [0x005F2BAA+532202]\n\tGetHandleVerifier [0x005F1990+527568]\n\tOrdinal0 [0x0050080C+1837068]\n\tOrdinal0 [0x00504CD8+1854680]\n\tOrdinal0 [0x00504DC5+1854917]\n\tOrdinal0 [0x0050ED64+1895780]\n\tBaseThreadInitThunk [0x7584FEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F27BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F27B8E+238]", "trace": "@allure.testcase('https://tpp07026.atlassian.net/wiki/spaces/APITEST/pages/8978433')\n    @allure.title('安裝瀏覽器')\n    @pytest.mark.run(order=2)\n    def test_setUp():\n            global driver\n            chrome_options = Options()\n            chrome_options.page_load_strategy = 'eager'\n>           driver = webdriver.Chrome(options=chrome_options)\n\nSSSO_login_test.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:92: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000205E046CF10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F27BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F27B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 106\nE       Current browser version is 108.0.5359.72 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00561ED3+2236115]\nE       \tOrdinal0 [0x004F92F1+1807089]\nE       \tOrdinal0 [0x004066FD+812797]\nE       \tOrdinal0 [0x00428C6D+953453]\nE       \tOrdinal0 [0x00424200+934400]\nE       \tOrdinal0 [0x004219C9+924105]\nE       \tOrdinal0 [0x0045806C+1146988]\nE       \tOrdinal0 [0x00457A6A+1145450]\nE       \tOrdinal0 [0x004518A6+1120422]\nE       \tOrdinal0 [0x0042A73D+960317]\nE       \tOrdinal0 [0x0042B71F+964383]\nE       \tGetHandleVerifier [0x0080E7E2+2743074]\nE       \tGetHandleVerifier [0x008008D4+2685972]\nE       \tGetHandleVerifier [0x005F2BAA+532202]\nE       \tGetHandleVerifier [0x005F1990+527568]\nE       \tOrdinal0 [0x0050080C+1837068]\nE       \tOrdinal0 [0x00504CD8+1854680]\nE       \tOrdinal0 [0x00504DC5+1854917]\nE       \tOrdinal0 [0x0050ED64+1895780]\nE       \tBaseThreadInitThunk [0x7584FEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F27BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F27B8E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: SessionNotCreatedException"}, "start": 1669948135813, "stop": 1669948139473, "uuid": "094cc9b5-0671-4d73-8f75-fe18d3732f96", "historyId": "1f2c0720b55c671c62ab7624f5c92d38", "testCaseId": "c96e6f63f0f78df60649a06be47cf2fb", "fullName": "SSSO_login_test#test_setUp", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "suite", "value": "SSSO_login_test"}, {"name": "host", "value": "C010700042"}, {"name": "thread", "value": "7140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "SSSO_login_test"}], "links": [{"type": "test_case", "url": "https://tpp07026.atlassian.net/wiki/spaces/APITEST/pages/8978433", "name": "https://tpp07026.atlassian.net/wiki/spaces/APITEST/pages/8978433"}]}