{"name": "test_input", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Method is not implemented\nStacktrace:\nNotImplementedError: Method is not implemented\n    at AndroidUiautomator2Driver.execute (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\execute.js:14:11)\n    at curCommandCancellable._bluebird.default.resolve.then (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:353:75)\n    at tryCatcher (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:517:31)\n    at Promise._settlePromise (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:574:18)\n    at Promise._settlePromiseCtx (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:611:10)\n    at _drainQueueStep (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:142:12)\n    at _drainQueue (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at runCallback (timers.js:696:18)\n    at tryOnImmediate (timers.js:667:5)\n    at processImmediate (timers.js:649:5)", "trace": "def test_input():\n>     driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n\napp_test.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:491: in execute_script\n    return self.execute(command, {\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:30: in check_response\n    raise wde\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001ACB090D540>\nresponse = {'status': 405, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Method is not implemented\",\"stacktrace\":\"NotImp...nCallback (timers.js:696:18)\\\\n    at tryOnImmediate (timers.js:667:5)\\\\n    at processImmediate (timers.js:649:5)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Method is not implemented\nE       Stacktrace:\nE       NotImplementedError: Method is not implemented\nE           at AndroidUiautomator2Driver.execute (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\execute.js:14:11)\nE           at curCommandCancellable._bluebird.default.resolve.then (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:353:75)\nE           at tryCatcher (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\util.js:16:23)\nE           at Promise._settlePromiseFromHandler (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:517:31)\nE           at Promise._settlePromise (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:574:18)\nE           at Promise._settlePromiseCtx (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\promise.js:611:10)\nE           at _drainQueueStep (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:142:12)\nE           at _drainQueue (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:131:9)\nE           at Async._drainQueues (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:147:5)\nE           at Immediate.Async.drainQueues (C:\\Users\\TPP07026\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\bluebird\\js\\release\\async.js:17:14)\nE           at runCallback (timers.js:696:18)\nE           at tryOnImmediate (timers.js:667:5)\nE           at processImmediate (timers.js:649:5)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: WebDriverException"}, "start": 1669621483204, "stop": 1669621483222, "uuid": "f6107197-b9de-48f4-b0b6-8ef9f13baee9", "historyId": "412d2786c2983bc5a3ef50d9b07c2d40", "testCaseId": "345b82fd0e177da18898f23e2c2276c6", "fullName": "app_test#test_input", "labels": [{"name": "suite", "value": "app_test"}, {"name": "host", "value": "C010700042"}, {"name": "thread", "value": "18592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "app_test"}]}